/**
 * audioserve API
 * REST API for audioserve
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthenticationApi", () => {
  let instance: api.AuthenticationApi
  beforeEach(function() {
    instance = new api.AuthenticationApi(config)
  });

  test("authenticatePost", () => {
    const secret: string = "secret_example"
    return expect(instance.authenticatePost(secret, {})).resolves.toBe(null)
  })
})

describe("CollectionsApi", () => {
  let instance: api.CollectionsApi
  beforeEach(function() {
    instance = new api.CollectionsApi(config)
  });

  test("colIdAudioPathGet", () => {
    const colId: number = 56
    const path: string = "path_example"
    const seek: number = 3.4
    const trans: string = "trans_example"
    const range: string = "range_example"
    return expect(instance.colIdAudioPathGet(colId, path, seek, trans, range, {})).resolves.toBe(null)
  })
  test("colIdCoverPathGet", () => {
    const colId: number = 56
    const path: string = "path_example"
    return expect(instance.colIdCoverPathGet(colId, path, {})).resolves.toBe(null)
  })
  test("colIdDescPathGet", () => {
    const colId: number = 56
    const path: string = "path_example"
    return expect(instance.colIdDescPathGet(colId, path, {})).resolves.toBe(null)
  })
  test("colIdDownloadPathGet", () => {
    const colId: number = 56
    const path: string = "path_example"
    const fmt: string = "fmt_example"
    return expect(instance.colIdDownloadPathGet(colId, path, fmt, {})).resolves.toBe(null)
  })
  test("colIdFolderGet", () => {
    const colId: number = 56
    const ord: string = "ord_example"
    const group: string = "group_example"
    return expect(instance.colIdFolderGet(colId, ord, group, {})).resolves.toBe(null)
  })
  test("colIdFolderPathGet", () => {
    const colId: number = 56
    const path: string = "path_example"
    const ord: string = "ord_example"
    const group: string = "group_example"
    return expect(instance.colIdFolderPathGet(colId, path, ord, group, {})).resolves.toBe(null)
  })
  test("colIdRecentGet", () => {
    const colId: number = 56
    return expect(instance.colIdRecentGet(colId, {})).resolves.toBe(null)
  })
  test("colIdSearchGet", () => {
    const colId: number = 56
    const q: string = "q_example"
    const ord: string = "ord_example"
    return expect(instance.colIdSearchGet(colId, q, ord, {})).resolves.toBe(null)
  })
  test("collectionsGet", () => {
    return expect(instance.collectionsGet({})).resolves.toBe(null)
  })
  test("transcodingsGet", () => {
    return expect(instance.transcodingsGet({})).resolves.toBe(null)
  })
})

describe("PositionsApi", () => {
  let instance: api.PositionsApi
  beforeEach(function() {
    instance = new api.PositionsApi(config)
  });

  test("positionsGroupColIdPathGet", () => {
    const group: string = "group_example"
    const colId: number = 56
    const path: string = "path_example"
    const finished: boolean = true
    const unfinished: boolean = true
    const from: number = 789
    const to: number = 789
    const rec: boolean = true
    return expect(instance.positionsGroupColIdPathGet(group, colId, path, finished, unfinished, from, to, rec, {})).resolves.toBe(null)
  })
  test("positionsGroupGet", () => {
    const group: string = "group_example"
    const finished: boolean = true
    const unfinished: boolean = true
    const from: number = 789
    const to: number = 789
    return expect(instance.positionsGroupGet(group, finished, unfinished, from, to, {})).resolves.toBe(null)
  })
  test("positionsGroupLastGet", () => {
    const group: string = "group_example"
    return expect(instance.positionsGroupLastGet(group, {})).resolves.toBe(null)
  })
  test("positionsGroupPost", () => {
    const body: api.Position = undefined
    const group: string = "group_example"
    return expect(instance.positionsGroupPost(body, group, {})).resolves.toBe(null)
  })
})

